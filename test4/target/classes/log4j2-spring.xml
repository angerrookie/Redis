<?xml version="1.0" encoding="UTF-8" ?>
<configuration monitorinterval="5" status="info" packages="com.zero.scribe.log4j2plugin">
    <propertis>
        <property name="PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"></property>
    </propertis>
    <appenders>
        <Console name="CONSOLE" target="system_out">
            <Patternlayout pattern="${PATTERN}" />
        </Console>
    </appenders>
    <loggers>
        <logger name="com.springboot.controller" level="debug"></logger>
        <root level="info">
            <appenderref ref="CONSOLE"/>
        </root>
    </loggers>
</configuration>
        <!--
        <?xml version="1.0" encoding="UTF-8" ?>
        &lt;!&ndash;monitorInterval：Log4j2 自动检测修改配置文件和重新配置本身，设置间隔秒数&ndash;&gt;
        <configuration monitorinterval="5" status="info" packages="com.zero.scribe.log4j2plugin">
           <propertis>
               &lt;!&ndash; 格式化输出：
                    %date表示日期，%thread表示线程名，
                    %-5level：级别从左显示5个字符宽度
                    %msg：日志消息，%n是换行符&ndash;&gt;
               &lt;!&ndash; %logger{36} 表示 Logger 名字最长36个字符 &ndash;&gt;
               <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
               &lt;!&ndash; 定义日志存储的路径，不要配置相对路径 &ndash;&gt;
               <property name="FILE_PATH" value="G:/java/springbootTest/log4j2" />
               <property name="FILE_NAME" value="boot-log4j2" />
           </propertis>

            <appenders>
                <console name="Console" target="SYSTEM_OUT">
                    &lt;!&ndash;输出日志的格式&ndash;&gt;
                    <patternlayout pattern="${LOG_PATTERN}" />
                    &lt;!&ndash;控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
                    <thresholdfilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
                </console>

                !&#45;&#45;文件会打印出所有信息&ndash;&gt;
                <file name="Filelog" filename="${FILE_PATH}/log4j2.log" append="true">
                    <patternlayout pattern="${LOG_PATTERN}" />
                </file>

                &lt;!&ndash; 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;
                <rollingfile name="RollingFileInfo" filename="${FILE_PATH}/info.log" filepattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
                    &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
                    <thresholdfilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
                    <patternlayout pattern="${LOG_PATTERN}" />
                    <policies>
                        &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;
                        <timebasedtriggeringpolicy interval="1" />
                        <sizebasedtriggeringpolicy size="10MB" />
                    </policies>
                    &lt;!&ndash; DefaultRolloverStrategy同一文件夹下15个文件开始覆盖&ndash;&gt;
                    <defaultrolloverstrategy max="15" />
                </rollingfile>
                &lt;!&ndash; 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;
                <rollingfile name="RollingFileWarn" filename="${FILE_PATH}/warn.log" filepattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
                    &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
                    <thresholdfilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
                    <patternlayout pattern="${LOG_PATTERN}" />
                    <policies>
                        &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;
                        <timebasedtriggeringpolicy interval="1" />
                        <sizebasedtriggeringpolicy size="10MB" />
                    </policies>
                    &lt;!&ndash; DefaultRolloverStrategy同一文件夹下15个文件开始覆盖&ndash;&gt;
                    <defaultrolloverstrategy max="15" />
                </rollingfile>

                &lt;!&ndash; 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档&ndash;&gt;
                <rollingfile name="RollingFileError" filename="${FILE_PATH}/error.log" filepattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
                    &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
                    <thresholdfilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
                    <patternlayout pattern="${LOG_PATTERN}" />
                    <policies>
                        &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;
                        <timebasedtriggeringpolicy interval="1" />
                        <sizebasedtriggeringpolicy size="10MB" />
                    </policies>
                    &lt;!&ndash; DefaultRolloverStrategy同一文件夹下15个文件开始覆盖&ndash;&gt;
                    <defaultrolloverstrategy max="15" />
                </rollingfile>
            </appenders>

            &lt;!&ndash;Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。&ndash;&gt;
            &lt;!&ndash;然后定义loggers，只有定义了logger并引入的appender，appender才会生效&ndash;&gt;
            <loggers>
                &lt;!&ndash;过滤掉spring和mybatis的一些无用的DEBUG信息&ndash;&gt;
                <logger name="org.mybatis" level="info" additivity="false">
                    <appenderref ref="Console" />
                </logger>
                &lt;!&ndash;监控系统信息&ndash;&gt;
                &lt;!&ndash;若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。&ndash;&gt;
                <logger name="org.springframework" level="info" additivity="false">
                    <appenderref ref="Console" />
                </logger>
                <root level="info">
                    <appender-ref ref="Console" />
                    <appender-ref ref="Filelog" />
                    &lt;!&ndash;<appender-ref ref="RollingFileInfo" />
                    <appender-ref ref="RollingFileWarn" />
                    <appender-ref ref="RollingFileError" />&ndash;&gt;
                </root>
               </loggers>
        </configuration>-->
